{"name":"simpleS","tagline":"Simple Server for Node.js","body":"<img src=\"https://raw.github.com/micnic/simpleS/master/logo.png\"/>\r\n# 0.6.5\r\n\r\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/micnic/simpleS)\r\n\r\nsimpleS is a simple HTTP(S) server for Node.JS that has some special features:\r\n\r\n- Simple structure with minimum configuration\r\n- No dependencies and high performance\r\n- Advanced routing for http requests, static files and errors\r\n- Restful verbs\r\n- Unique interface for requests and responses (named as connection)\r\n- Response compression (deflate and gzip, enabled by default)\r\n- Virtual Hosting\r\n- CORS support and Referer blocking\r\n- Sessions (disabled by default)\r\n- Template engine connection\r\n- WebSocket implementation (version 13, RFC 6455)\r\n- Client-side simple API for AJAX and WebSocket\r\n\r\n#### Works in Node.JS 0.10+\r\n#### Any feedback is welcome!\r\n\r\n#### More simple modules:\r\n- [simpleR](http://micnic.github.com/simpleR/)\r\n- [simpleT](http://micnic.github.com/simpleT/)\r\n\r\n### [Changelog](https://github.com/micnic/simpleS/wiki/Changelog)\r\n### [Documentation](https://github.com/micnic/simpleS/wiki/Documentation)\r\n\r\n## Instalation\r\n\r\n    npm install simples\r\n\r\n## Examples\r\n\r\nSee the folder `examples/` in the module directory, it contains examples that cover most simpleS features.\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar simples = require('simples');\r\n\r\nvar server = simples(12345); // Your server is set up on port 12345\r\n```\r\n\r\n## Routing\r\n\r\n```javascript\r\nserver.get('/', function (connection) {\r\n    connection.end('Simples Works');\r\n});\r\n\r\nserver.serve('static_files'); // Route for static files located in the folder \"static_files\"\r\n\r\nserver.error(404, function (connection) {\r\n    connection.end('Error 404 caught');\r\n});\r\n```\r\n\r\n## Virtual Hosting\r\n\r\n```javascript\r\nvar mainHost = server; // Main host\r\nvar host1 = server.host('example.com'); // Other hosts\r\nvar host2 = server.host('example2.com');\r\n\r\n// Now for each host you can apply individual routing\r\nmainHost.get('/', function (connection) {\r\n    connection.end('Main Host');\r\n});\r\n\r\nhost1.get('/', function (connection) {\r\n    connection.end('Host1');\r\n});\r\n\r\nhost2.get('/', function (connection) {\r\n    connection.end('Host2');\r\n});\r\n```\r\n\r\n## WebSocket\r\n\r\n```javascript\r\nserver.ws('/', {\r\n    limit: 1024, // The maximum size of a message\r\n    mode: 'raw', // Set connection mode, see docs for more info\r\n    type: 'text' // Set the type of the content of the data\r\n}, function (connection) {\r\n    console.log('New connection');\r\n\r\n    connection.on('message', function (message) {\r\n        console.log('Message: ' + message.data);\r\n        connection.send(message.data);\r\n    });\r\n\r\n    connection.on('close', function () {\r\n        console.log('Connection closed');\r\n    });\r\n});\r\n```\r\n\r\nOn client:\r\n\r\n```javascript\r\n// Use browser built-in API\r\nvar socket = new WebSocket('ws://localhost:12345/', 'echo'); // Enjoy the real-time connection\r\n\r\nsocket.onmessage = function (event) {\r\n    console.log(event.data);\r\n};\r\n\r\nsocket.send('ECHO');\r\n\r\n// or simpleS client-side simple API\r\nvar socket = simples.ws('/', ['echo']);\r\n\r\nsocket.on('message', function (message) {\r\n    console.log(message.data);\r\n});\r\n\r\nsocket.send('ECHO');\r\n```\r\n\r\n## Template engine connection\r\n\r\n```javascript\r\nserver.engine(bestTemplateEngine);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}