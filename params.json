{"name":"simpleS","tagline":"Simple Server for Node.js","body":"<img src=\"https://raw.github.com/micnic/simpleS/master/logo.png\"/>\r\n# 0.8.1\r\n\r\n[![Gitter](https://badges.gitter.im/simples.png)](https://gitter.im/micnic/simpleS)\r\n\r\nsimpleS is a simple web framework for Node.JS designed to create HTTP(S) servers and clients with some special features:\r\n\r\n- High performance and simple structure with minimum configuration\r\n- Advanced routing for http requests, static files and errors\r\n- Unique interface for requests and responses (named as connection)\r\n- Response compression (deflate and gzip, disabled by default)\r\n- Virtual Hosting\r\n- CORS support\r\n- Sessions (disabled by default)\r\n- Template engine support\r\n- WebSocket implementation (version 13, RFC 6455)\r\n- Client API for HTTP requests and WebSocket connections\r\n- Browser simple API for AJAX and WebSocket\r\n\r\n#### Works with node.js 0.10+ and io.js 1.0+ !\r\n#### Any feedback is welcome!\r\n\r\n#### More simple modules:\r\n- [recache](https://www.npmjs.com/package/rechache)\r\n- [simpleR](https://www.npmjs.com/package/simpler)\r\n- [simpleT](https://www.npmjs.com/package/simplet)\r\n\r\n### [Changelog](https://github.com/micnic/simpleS/wiki/Changelog)\r\n### [Documentation](https://github.com/micnic/simpleS/wiki/Documentation)\r\n\r\n## Instalation\r\n\r\n    npm install simples\r\n\r\n## Examples\r\n\r\nSee the folder `examples/` in the module directory, it contains examples that cover most simpleS features.\r\n\r\n## Usage\r\n\r\n### Server Creation\r\n\r\n```js\r\nvar simples = require('simples');\r\n\r\nvar server = simples(); // Your server is set up on port 80\r\n\r\n// Enable compression (default is deflate)\r\nserver.config({\r\n    compression: {\r\n        enabled: true\r\n    }\r\n});\r\n\r\n// Serve static files located in the folder \"static\"\r\nserver.serve('static');\r\n\r\n// Catch 404 Error\r\nserver.error(404, function (connection) {\r\n    connection.end('Error 404 caught');\r\n});\r\n\r\n// Create the first route\r\nserver.get('/', function (connection) {\r\n    connection.end('Simples Works');\r\n});\r\n```\r\n\r\n### Client Creation\r\n\r\n```js\r\nvar simples = require('simples');\r\n\r\nvar client = simples.client();\r\n\r\n// GET request\r\nclient.get('/').on('body', function (response, body) {\r\n    console.log('Response status: ' + response.status);\r\n    console.log('Response body: ' + body.toString());\r\n});\r\n\r\n// POST request\r\nclient.post('/send').send(/* data */).on('response', function (response) {\r\n    // Do something with the response\r\n}).on('body', function (response, body) {\r\n    console.log('Response body: ' + body.toString());\r\n});\r\n```\r\n\r\n### Virtual Hosting\r\n\r\n```js\r\nvar host0 = server; // The server is in the same time the main host\r\nvar host1 = server.host('example.com'); // Other hosts\r\nvar host2 = server.host('example2.com');\r\n\r\n// Now for each host you can apply individual routing\r\nhost0.get('/', function (connection) {\r\n    connection.end('Main Host');\r\n});\r\n\r\nhost1.get('/', function (connection) {\r\n    connection.end('Host 1');\r\n});\r\n\r\nhost2.get('/', function (connection) {\r\n    connection.end('Host 2');\r\n});\r\n```\r\n\r\n### WebSocket\r\n\r\nLet's create an echo WebSocket server:\r\n\r\n```js\r\nserver.ws('/', {\r\n    limit: 1024, // The maximum size of a message\r\n    mode: 'text', // Set connection mode, see docs for more info\r\n    origins: ['null'] // Set accepted origins, \"null\" for localhost\r\n}, function (connection) {\r\n\r\n    // Log the new connection\r\n    console.log('New connection');\r\n\r\n    // Listen for messages to send them back\r\n    connection.on('message', function (message) {\r\n        console.log('Message: ' + message.data);\r\n        connection.send(message.data);\r\n    });\r\n\r\n    // Log connection close\r\n    connection.on('close', function () {\r\n        console.log('Connection closed');\r\n    });\r\n});\r\n```\r\n\r\nAccess the server from the browser built-in WebSocket API:\r\n\r\n```js\r\nvar socket = new WebSocket('ws://localhost/', 'echo');\r\n\r\n// Listen for messages\r\nsocket.onmessage = function (event) {\r\n    console.log(event.data);\r\n};\r\n\r\n// Send the first message\r\nsocket.send('ECHO');\r\n```\r\n\r\nAccess the server from the browser simpleS WebSocket API:\r\n\r\n```js\r\nvar socket = simples.ws('/', ['echo']);\r\n\r\n// Listen for messages\r\nsocket.on('message', function (message) {\r\n    console.log(message.data);\r\n});\r\n\r\n// Send the first message\r\nsocket.send('ECHO');\r\n```\r\n\r\nAccess the server from server-side simpleS client WebSocket API:\r\n\r\n```js\r\nvar simples = require('simples');\r\n\r\nvar client = simples.client();\r\n\r\nvar socket = client.ws('/');\r\n\r\n// Listen for messages\r\nsocket.on('message', function (message) {\r\n    console.log(message.data);\r\n});\r\n\r\n// Send the first message\r\nsocket.send('ECHO');\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}